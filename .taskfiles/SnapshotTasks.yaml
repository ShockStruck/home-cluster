---
version: "3"

x-preconditions: &preconditions
  - &has-app
    sh: kubectl get deploy,sts -A | awk '/{{.APP}}\s/{print $1}' | grep .
    msg: "App '{{.APP}}' not found"
  - &has-cronjob
    sh: kubectl get cronjob -n {{.NAMESPACE}} {{.VOLUME}}-snapshot
    msg: "CronJob '{{.APP}}-snapshot' in '{{.NAMESPACE}}' namespace not found"
  - &has-volume
    sh: kubectl get pvc -n {{.NAMESPACE}} {{.VOLUME}}
    msg: "PersistentVolumeClaim '{{.VOLUME}}' in '{{.NAMESPACE}}' namespace not found"
  - &has-restore-job
    sh: "test -f {{.PROJECT_DIR}}/hack/restore-job.yaml"
    msg: "File '{{.PROJECT_DIR}}/hack/restore-job.yaml' not found"

x-vars: &vars
  APP: >-
    {{.APP |default nil}}
  NAMESPACE:
    sh: kubectl get deploy,sts -A | awk '/{{.APP}}\s/{print $1}'
  NAME:
    sh: kubectl get deploy,sts -n {{.NAMESPACE}} | awk '/{{.APP}}\s/{print $1}'
  VOLUME:
    sh: kubectl get pvc -n {{.NAMESPACE}} --no-headers -l "app.kubernetes.io/name={{.APP}}" | awk '{print $1}'
  SNAPSHOT: '{{.SNAPSHOT | default "latest"}}'
  TS: '{{now | date "2006012150405"}}'

tasks:
  list:
    desc: List available snapshots for an app (task snapshot:list APP=radarr [KOPIA_NAMESPACE=<namespace>])
    cmds:
      - kubectl -n {{.KOPIA_NAMESPACE | default "default"}} exec -it deploy/kopia -- kopia snapshot list /data/{{.NAMESPACE}}/{{.VOLUME}} {{.CLI_ARGS}}
    vars: *vars
    preconditions:
      - sh: kubectl -n {{.KOPIA_NAMESPACE | default "default"}} get deploy kopia
        msg: |
          deployment/kopia in {{.NAMESPACE | default "default"}} namespace not found

  create:
    desc: Create a snapshot for an app (task snapshot:create APP=radarr [TIMEOUT=<timeout>])
    cmds:
      - |
        kubectl -n {{.NAMESPACE}} create job --from=cronjob/{{.VOLUME}}-snapshot {{.VOLUME}}-snapshot-{{.TS}} --dry-run=client --output yaml \
        | yq eval "del(.spec.template.spec.initContainers)" - \
        | kubectl apply -f -
      - sleep 2
      - kubectl -n {{.NAMESPACE}} wait pod --for condition=ready --selector=job-name={{.VOLUME}}-snapshot-{{.TS}} --timeout={{.TIMEOUT | default "1m"}}
      - kubectl -n {{.NAMESPACE}} logs --selector=job-name={{.VOLUME}}-snapshot-{{.TS}} -f
      - kubectl -n {{.NAMESPACE}} delete job {{.VOLUME}}-snapshot-{{.TS}}
    vars: *vars
    preconditions:
      - *has-app
      - *has-cronjob
      - *has-volume

  restore:
    desc: Restore an app from a snapshot (task snapshot:restore APP=radarr [SNAPSHOT=(latest|<snapshot-id>) KOPIA_NAMESPACE=<namespace> TIMEOUT=<timeout>])
    cmds:
      - kubectl -n {{.NAMESPACE}} scale {{.NAME}} --replicas 0
      - kubectl -n {{.NAMESPACE}} wait pod --for delete --selector="app.kubernetes.io/name={{.APP}}" --timeout=2m
      - envsubst < <(cat ./hack/restore-job.yaml) | kubectl apply -f -
      - sleep 2
      - kubectl -n {{.NAMESPACE}} wait job --for condition=complete {{.VOLUME}}-restore-snapshot --timeout={{.TIMEOUT | default "60m"}}
      - kubectl -n {{.NAMESPACE}} logs job/{{.VOLUME}}-restore-snapshot
      - kubectl -n {{.NAMESPACE}} delete job {{.VOLUME}}-restore-snapshot
    vars: *vars
    env:
      APP: "{{.APP}}"
      NAMESPACE: "{{.NAMESPACE}}"
      VOLUME: "{{.VOLUME}}"
      SNAPSHOT:
        sh: |
          if [[ {{.SNAPSHOT}} == "latest" ]]; then
            kubectl exec deployment/kopia -n {{.KOPIA_NAMESPACE | default "default"}} -- kopia snapshot list /data/{{.NAMESPACE}}/{{.VOLUME}} --json | jq --raw-output '.[-1] | .id'
          else
            echo {{.SNAPSHOT}}
          fi
    preconditions: *preconditions
