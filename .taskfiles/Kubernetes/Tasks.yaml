---
version: "3"

tasks:
  rook-ceph-toolbox:
    desc: Exec into Rook Ceph toolbox
    cmds:
      - kubectl -n rook-ceph exec -it $(kubectl -n rook-ceph get pod -l "app=rook-ceph-tools" -o jsonpath='{.items[0].metadata.name}') -- bash

  rook-password:
    desc: Retrieve Rook dashboard password
    cmds:
      - kubectl -n rook-ceph get secret rook-ceph-dashboard-password -o jsonpath="{['data']['password']}" | base64 --decode && echo

  pgo-fix-permission:
    desc: Fix data directory permission bug
    cmds:
      - kubectl exec -it $(kubectl get pod -l "postgres-operator.crunchydata.com/role=master" -o jsonpath='{.items[0].metadata.name}') -c database -- chmod 700 /pgdata/pg14

  exec-nextcloud:
    desc: Exec into Nextcloud pod as www-data user
    cmds:
      - kubectl exec -it $(kubectl -n default get pod -l "app.kubernetes.io/name=nextcloud" -l "app.kubernetes.io/component=app" -o jsonpath='{.items[0].metadata.name}') -- su -s /bin/sh www-data

  gen-authelia-client-secret:
    desc: Generate random hashed authelia client secret
    cmds:
      - kubectl -n authentication-system exec -it $(kubectl -n authentication-system get pod -l "app.kubernetes.io/name=authelia" -o jsonpath='{.items[0].metadata.name}') -- authelia crypto hash generate pbkdf2 --variant sha512 --random --random.length 72 --random.charset rfc3986

  mount-pvc:
    desc: Mount a PersistentVolumeClaim to a pod temporarily
    interactive: true
    vars:
      claim: '{{ or .claim (fail "PersistentVolumeClaim `claim` is required") }}'
      namespace: '{{ .namespace | default "default" }}'
    cmds:
      - |
        kubectl run -n {{.namespace}} debug-{{.claim}} -i --tty --rm --image=null --privileged --overrides='
          {
            "apiVersion": "v1",
            "spec": {
              "containers": [
                {
                  "name": "debug",
                  "image": "ghcr.io/onedr0p/alpine:rolling",
                  "command": [
                    "/bin/bash"
                  ],
                  "stdin": true,
                  "stdinOnce": true,
                  "tty": true,
                  "volumeMounts": [
                    {
                      "name": "config",
                      "mountPath": "/data/config"
                    }
                  ]
                }
              ],
              "volumes": [
                {
                  "name": "config",
                  "persistentVolumeClaim": {
                    "claimName": "{{.claim}}"
                  }
                }
              ],
              "restartPolicy": "Never"
            }
          }'
